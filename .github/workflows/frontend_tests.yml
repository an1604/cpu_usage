name: Frontend Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test -- --watchAll=false --coverage
      env:
        REACT_APP_API_URL: 'http://localhost:3000'
        REACT_APP_BACKEND_URL: 'http://localhost:5000'

  test-frontend-docker:
    name: Frontend Docker Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      working-directory: ./frontend
      run: docker build -t frontend-test .

    - name: Test container with mock credentials
      working-directory: ./frontend
      run: |
        docker run -d -p 3000:3000 \
        -e REACT_APP_API_URL=http://localhost:3000 \
        -e REACT_APP_BACKEND_URL=http://localhost:5000 \
        -e CI=false \
        --name frontend-test \
        frontend-test

    - name: Verify container is running
      run: |
        sleep 5
        docker ps
        docker logs frontend-test
        for i in {1..5}; do
          if docker ps | grep -q frontend-test; then
            echo "Container is running"
            break
          fi
          sleep 1
        done
        if ! docker ps | grep -q frontend-test; then
          echo "Container failed to start"
          exit 1
        fi

    - name: Test container health endpoint
      run: |
        for i in {1..5}; do
          echo "Attempt $i to check health endpoint..."
          response=$(curl -f -s -w "\n%{http_code}" --max-time 5 http://localhost:3000/health)
          status_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | sed '$d')
          
          echo "Response body: $body"
          echo "Status code: $status_code"
          
          if [ "$status_code" = "200" ] && echo "$body" | grep -q '"status":"ok"'; then
            echo "Health endpoint is working"
            exit 0
          fi
          
          if [ $i -lt 5 ]; then
            echo "Health check failed, waiting before retry..."
            sleep 2
          fi
        done
        exit 1
    